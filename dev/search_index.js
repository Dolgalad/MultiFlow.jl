var documenterSearchIndex = {"docs":
[{"location":"core_functions/feature_graph.html#Feature-Graph","page":"Feature Graph","title":"Feature Graph","text":"","category":"section"},{"location":"core_functions/feature_graph.html","page":"Feature Graph","title":"Feature Graph","text":"Definition of the FeatureDiGraph object used for representing directed graphs with multi-dimensional features on edges.","category":"page"},{"location":"core_functions/feature_graph.html#Index","page":"Feature Graph","title":"Index","text":"","category":"section"},{"location":"core_functions/feature_graph.html","page":"Feature Graph","title":"Feature Graph","text":"Pages = [\"feature_graph.md\"]","category":"page"},{"location":"core_functions/feature_graph.html#Full-docs","page":"Feature Graph","title":"Full docs","text":"","category":"section"},{"location":"core_functions/feature_graph.html","page":"Feature Graph","title":"Feature Graph","text":"Modules = [MultiFlows]\nPages = [\"feature_graph.jl\"]\n","category":"page"},{"location":"core_functions/feature_graph.html#MultiFlows.FeatureDiGraph","page":"Feature Graph","title":"MultiFlows.FeatureDiGraph","text":"FeatureDiGraph{T,N}\n\nConcrete directed graph with a feature vector for each arc.\n\nThe default constructor expects srcnodes, dstnodes to be vectors of source and destination vertices for each edge and arc_features to by a vector of numbers. The following example initialises a directed graph with three vertices and edges and a single Float64 feature on each edge.\n\nExamplex\n\njulia> g1 = FeatureDiGraph([1,2,3], [2,3,1], [5., 5., 5.])\nFeatureDiGraph{Int64, Float64}([1, 2, 3], [2, 3, 1], [5.0, 5.0, 5.0])\n\n\n\n\n\n","category":"type"},{"location":"core_functions/feature_graph.html#MultiFlows.FeatureDiGraph-Union{Tuple{N}, Tuple{T}, Tuple{Vector{T}, Vector{T}, AbstractArray{N, N1} where N1}} where {T<:Number, N<:Number}","page":"Feature Graph","title":"MultiFlows.FeatureDiGraph","text":"FeatureDiGraph(srcnodes::Vector{T}, dstnodes::Vector{T}, arc_features::AbstractArray{N}) where {T<:Number, N<:Number}\n\nConstruct a FeatureDiGraph object where edge features are given by arc_features[i,:].\n\nFor example we can build a graph with a two-dimensional feature on each edge : \n\njulia> g = FeatureDiGraph([1,2,3], [2,3,1], 5 * ones(3,2))\nFeatureDiGraph{Int64, Vector{Float64}}([1, 2, 3], [2, 3, 1], [[5.0, 5.0], [5.0, 5.0], [5.0, 5.0]])\n\n\n\n\n\n","category":"method"},{"location":"core_functions/feature_graph.html#MultiFlows.FeatureDiGraphEdge","page":"Feature Graph","title":"MultiFlows.FeatureDiGraphEdge","text":"FeatureDiGraphEdge\n\nConcrete type representing FeatureDiGraph edges.\n\n\n\n\n\n","category":"type"},{"location":"core_functions/feature_graph.html#Graphs.SimpleGraphs.add_edge!-Union{Tuple{N}, Tuple{T}, Tuple{FeatureDiGraph{T, N}, T, T, N}} where {T<:Number, N}","page":"Feature Graph","title":"Graphs.SimpleGraphs.add_edge!","text":"Graphs.add_edge!(g::FeatureDiGraph{T,N}, src::T, dst::T, feat::N}\n\nAdd arc to a FeatureDiGraph object going from vertex src to dst and with features feat. Return true on success and false if graph already has an edge (src, dst). \n\nExamples\n\njulia> add_edge!(g1, 1, 4, 2.)\ntrue\n\njulia> add_edge!(g1, 1, 2, 3.)\nfalse\n\njulia> nv(g1), ne(g1)\n(4, 4)\n\njulia> add_edge(g, 1, 4, ones(3)) # must have feature_dim(g) == size(feat)\nERROR: DimensionMismatch(\"Expected feature dimension (2,) got (3,)\")\n[...]\n\n\n\n\n\n","category":"method"},{"location":"core_functions/feature_graph.html#Graphs.dst-Tuple{MultiFlows.FeatureDiGraphEdge}","page":"Feature Graph","title":"Graphs.dst","text":"Graphs.dst(e::FeatureDiGraphEdge)\n\nGet edge destination.\n\n\n\n\n\n","category":"method"},{"location":"core_functions/feature_graph.html#Graphs.edges-Tuple{FeatureDiGraph}","page":"Feature Graph","title":"Graphs.edges","text":"edges(g::FeatureDiGraph)\n\nReturn list of edges of the graph. Needed for compatibility with Graphs.jl package.\n\nExamples\n\njulia> edges(g1)\n4-element Vector{MultiFlows.FeatureDiGraphEdge{Int64, Int64}}:\n MultiFlows.FeatureDiGraphEdge{Int64, Int64}(1, 2, 1)\n MultiFlows.FeatureDiGraphEdge{Int64, Int64}(2, 3, 1)\n MultiFlows.FeatureDiGraphEdge{Int64, Int64}(3, 1, 1)\n MultiFlows.FeatureDiGraphEdge{Int64, Int64}(1, 4, 2)\n\n\n\n\n\n\n","category":"method"},{"location":"core_functions/feature_graph.html#Graphs.has_edge-Union{Tuple{N}, Tuple{T}, Tuple{FeatureDiGraph{T, N}, T, T}} where {T<:Number, N}","page":"Feature Graph","title":"Graphs.has_edge","text":"Graphs.has_edge(g::FeatureDiGraph{T,N}, s::T, d::T)\n\nCheck if graph contains edge (s,d). \n\nExamples\n\njulia> using Graphs\n\njulia> has_edge(g, 1, 2)\ntrue\n\njulia> has_edge(g, 2, 1)\nfalse\n\n\n\n\n\n","category":"method"},{"location":"core_functions/feature_graph.html#Graphs.inneighbors-Union{Tuple{N}, Tuple{T}, Tuple{FeatureDiGraph{T, N}, T}} where {T<:Number, N}","page":"Feature Graph","title":"Graphs.inneighbors","text":"Graphs.inneighbors(g::FeatureDiGraph{T,N}, v::T)\n\nGet neighbors u of vertex v such that edge (u,v) belongs to the graph. Needed for compatibility with Graphs.jl package.\n\nExamples\n\njulia> inneighbors(g1, 1)\n1-element Vector{Int64}:\n 3\n\n\n\n\n\n\n","category":"method"},{"location":"core_functions/feature_graph.html#Graphs.is_directed-Tuple{FeatureDiGraph}","page":"Feature Graph","title":"Graphs.is_directed","text":"Graphs.is_directed(g::FeatureDiGraph{T,N})\n\nCheck if the graph is directed, always returns true. Needed for compatibility with the Graphs.jl package.\n\n\n\n\n\n","category":"method"},{"location":"core_functions/feature_graph.html#Graphs.ne-Tuple{FeatureDiGraph}","page":"Feature Graph","title":"Graphs.ne","text":"ne(g::FeatureDiGraph)\n\nReturn number of arcs of the graph. Needed for compatibility with the Graphs.jl package.\n\nExamples\n\njulia> ne(g)\n3\n\n\n\n\n\n","category":"method"},{"location":"core_functions/feature_graph.html#Graphs.nv-Tuple{FeatureDiGraph}","page":"Feature Graph","title":"Graphs.nv","text":"nv(g::FeatureDiGraph)\n\nReturns number of vertices of the graph. Needed for compatibility with the Graphs.jl package.\n\nExamples\n\njulia> nv(g)\n3\n\n\n\n\n\n","category":"method"},{"location":"core_functions/feature_graph.html#Graphs.outneighbors-Union{Tuple{N}, Tuple{T}, Tuple{FeatureDiGraph{T, N}, T}} where {T<:Number, N}","page":"Feature Graph","title":"Graphs.outneighbors","text":"Graphs.outneighbors(g::FeatureDiGraph{T,N}, v::T)\n\nGet outgoing neighbors of vertex v in the graph. Needed for compatibility with Graphs.jl package.\n\nExamples\n\njulia> outneighbors(g1, 1)\n2-element Vector{Int64}:\n 2\n 4\n\n\n\n\n\n\n","category":"method"},{"location":"core_functions/feature_graph.html#Graphs.src-Tuple{MultiFlows.FeatureDiGraphEdge}","page":"Feature Graph","title":"Graphs.src","text":"Graphs.src(e::FeatureDiGraphEdge)\n\nGet edge source.\n\n\n\n\n\n","category":"method"},{"location":"core_functions/feature_graph.html#MultiFlows.feature_dim-Tuple{FeatureDiGraph}","page":"Feature Graph","title":"MultiFlows.feature_dim","text":"feature_dim(g::FeatureDiGraph)\n\nGet arc feature dimension. \n\nExamplex\n\njulia> feature_dim(g1) # scalar features\n()\n\njulia> feature_dim(g)  # two-dimension features\n(2,)\n\n\n\n\n\n","category":"method"},{"location":"core_functions/feature_graph.html#MultiFlows.feature_matrix-Tuple{FeatureDiGraph, AbstractArray{Int64, N} where N}","page":"Feature Graph","title":"MultiFlows.feature_matrix","text":"feature_matrix(g::FeatureDiGraph, feature_idx::AbstractArray{Int64})\n\nGet a nv(g) x nv(g) x size(feature_idx) matrix with coefficients equal to arc feature values corresponding to indexes in feature_idx. TODO : managing feature_idx with multiple dimensions.\n\nExamples\n\njulia> feature_matrix(g, [2, 1])\n4×4×2 Array{Float64, 3}:\n[:, :, 1] =\n 0.0  5.0  0.0  1.0\n 0.0  0.0  5.0  0.0\n 5.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0\n\n[:, :, 2] =\n 0.0  5.0  0.0  1.0\n 0.0  0.0  5.0  0.0\n 5.0  0.0  0.0  0.0\n 0.0  0.0  0.0  0.0\n\n\n\n\n\n\n","category":"method"},{"location":"core_functions/feature_graph.html#MultiFlows.feature_matrix-Union{Tuple{N}, Tuple{T}, Tuple{FeatureDiGraph, Int64}} where {T<:Number, N}","page":"Feature Graph","title":"MultiFlows.feature_matrix","text":"feature_matrix(g::FeatureDiGraph, feature_idx::Int64)\n\nGet a nv(g) x nv(g) matrix with coefficients equal to arc feature values. Values returned as a sparse matrix.\n\nExamples\n\njulia> feature_matrix(g, 1)\n4×4 SparseMatrixCSC{Float64, Int64} with 4 stored entries:\n  ⋅   5.0   ⋅   1.0\n  ⋅    ⋅   5.0   ⋅\n 5.0   ⋅    ⋅    ⋅\n  ⋅    ⋅    ⋅    ⋅\n\n\n\n\n\n\n","category":"method"},{"location":"core_functions/core.html#Core-functions","page":"Core functions","title":"Core functions","text":"","category":"section"},{"location":"core_functions/core.html","page":"Core functions","title":"Core functions","text":"MultiFlows.jl includes the following core functions.","category":"page"},{"location":"core_functions/core.html#Index","page":"Core functions","title":"Index","text":"","category":"section"},{"location":"core_functions/core.html","page":"Core functions","title":"Core functions","text":"Pages = [\"core.md\"]","category":"page"},{"location":"core_functions/core.html#Full-docs","page":"Core functions","title":"Full docs","text":"","category":"section"},{"location":"core_functions/core.html","page":"Core functions","title":"Core functions","text":"Modules = [MultiFlows]\nPages = [\"core.jl\"]\n","category":"page"},{"location":"index.html#MultiFlows.jl-Documentation","page":"MultiFlows.jl Documentation","title":"MultiFlows.jl Documentation","text":"","category":"section"}]
}
